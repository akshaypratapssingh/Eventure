create extension if not exists "postgis" with schema "extensions";


create schema if not exists "gis";


create table "public"."attendance" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "event_id" bigint not null
);


alter table "public"."attendance" enable row level security;

alter table "public"."events" add column "location_point" geography;

CREATE UNIQUE INDEX attendance_pkey ON public.attendance USING btree (id);

CREATE INDEX events_geo_index ON public.events USING gist (location_point);

alter table "public"."attendance" add constraint "attendance_pkey" PRIMARY KEY using index "attendance_pkey";

alter table "public"."attendance" add constraint "attendance_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."attendance" validate constraint "attendance_event_id_fkey";

alter table "public"."attendance" add constraint "attendance_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."attendance" validate constraint "attendance_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.nearby_events(lat double precision, long double precision)
 RETURNS TABLE(id bigint, created_at timestamp with time zone, title text, description text, date timestamp with time zone, location text, image_uri text, user_id uuid, lat double precision, long double precision, dist_meters double precision)
 LANGUAGE sql
AS $function$
  SELECT 
    id, 
    created_at, 
    title, 
    description, 
    date, 
    location, 
    image_uri, 
    user_id, 
    ST_Y(location_point::geometry) AS lat, 
    ST_X(location_point::geometry) AS long, 
    ST_Distance(location_point, ST_Point(long, lat)::geography) AS dist_meters
  FROM 
    public.events
  ORDER BY 
    location_point <-> ST_Point(long, lat)::geography;
$function$
;

grant delete on table "public"."attendance" to "anon";

grant insert on table "public"."attendance" to "anon";

grant references on table "public"."attendance" to "anon";

grant select on table "public"."attendance" to "anon";

grant trigger on table "public"."attendance" to "anon";

grant truncate on table "public"."attendance" to "anon";

grant update on table "public"."attendance" to "anon";

grant delete on table "public"."attendance" to "authenticated";

grant insert on table "public"."attendance" to "authenticated";

grant references on table "public"."attendance" to "authenticated";

grant select on table "public"."attendance" to "authenticated";

grant trigger on table "public"."attendance" to "authenticated";

grant truncate on table "public"."attendance" to "authenticated";

grant update on table "public"."attendance" to "authenticated";

grant delete on table "public"."attendance" to "service_role";

grant insert on table "public"."attendance" to "service_role";

grant references on table "public"."attendance" to "service_role";

grant select on table "public"."attendance" to "service_role";

grant trigger on table "public"."attendance" to "service_role";

grant truncate on table "public"."attendance" to "service_role";

grant update on table "public"."attendance" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."attendance"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."attendance"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."events"
as permissive
for insert
to authenticated
with check (true);



